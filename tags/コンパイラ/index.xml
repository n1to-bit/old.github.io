<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>コンパイラ on nito95 blog</title>
    <link>https://nito95.github.io/tags/%E3%82%B3%E3%83%B3%E3%83%91%E3%82%A4%E3%83%A9/</link>
    <description>Recent content in コンパイラ on nito95 blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 12 Apr 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://nito95.github.io/tags/%E3%82%B3%E3%83%B3%E3%83%91%E3%82%A4%E3%83%A9/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>「コンピュータシステムの理論と実装」(Nand2Tetris)</title>
      <link>https://nito95.github.io/posts/2021-04-12/</link>
      <pubDate>Mon, 12 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://nito95.github.io/posts/2021-04-12/</guid>
      <description>低レイヤーの知識を幅広く身に着けようと思い、1ヶ月前から 「コンピュータシステムの理論と実装 ― モダンなコンピュータの作り方」 を読んで実践していました。
最初にNandゲートを学んでから積み上げ式でALU、CPU、メモリ、アセンブラ、VM変換器、コンパイラ、OSを一気通貫で作っていくという本です。本自体はあまり大きくなくサックリできるかなと思って始めたのですが、非常にHeavyで濃密な時間を過ごすこととなりました。
この本は今後もたまに読み返すことになると思います。
ちなみにこの本を読む前の自分の低レイヤーに関する知識は、
「プログラムはなぜ動くのか」 「コンピュータはなぜ動くのか」 「［試して理解］Linuxのしくみ」 「コーディングを支える技術」 を読んでいるレベルです。あと遊びでアセンブリでHello Worldを出力させたことがある程度でした。(参考: Macでアセンブリ言語のhello worldを実行する方法)
大学で情報系の勉強をしていない自分は、論理ゲートやフリップフロップですら新鮮でした。この本ではハードウェアシミュレータを使って自分で作ったものを実際に動かすので非常に腑に落としやすく、定着度も深いものとなります。
この本は各トピックの概要レベルしか理解できず、作るものもモダンなものとは程遠いと思いますが、ここからスタートして次に各トピックに特化された本を読むといいと思います。 CPUは「CPUの創りかた」 コンパイラは 「低レイヤを知りたい人のためのCコンパイラ作成入門」 OSは 「Operating-Systems-Three-Easy-Pieces」あたりで深める予定です。
あと第6章のアセンブラと第7~8章のVM変換器は、競プロ用に使っているまだ経験の浅いC++で書いてみたので、C++のファイル操作や文字列操作の知見を深めるいいきっかけになりました。コードは github にあげています。</description>
    </item>
    
  </channel>
</rss>
