<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>VRP on nito95 blog</title>
    <link>https://nito95.github.io/tags/vrp/</link>
    <description>Recent content in VRP on nito95 blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 28 Dec 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://nito95.github.io/tags/vrp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>OR-Tools で解く Vehicle Routing Problem</title>
      <link>https://nito95.github.io/posts/2018-12-28/</link>
      <pubDate>Fri, 28 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://nito95.github.io/posts/2018-12-28/</guid>
      <description>現在、自分は SmartDrive Fleet という SaaS プロダクトを担当しています。 デバイスを従業員の車両に取り付けることで、車両管理や運転日報、安全運転診断やジオフェンシングといった機能をWebやアプリで提供しています。
ユーザーの業種は幅広いのですが、その中でも通所介護や通所リハビリテーション (以後 デイケア) を行っている事業所が一定の割合を占めています。 デイケアでは朝夕に利用者を送迎する必要があり、同じ時間帯に同時に3~4台、規模によっては10~20台前後の車を使うことがあります。
各利用者は家にピックアップする時間がそれぞれ決まっており、事業所に来る、つまりサービスを受け始める時間も決まっているのでなかなかシビアな朝の迎えをしています。 事業所の人は円滑に送迎が行われているのか管理をする必要があり、助手席に座るもう一人のスタッフが電話をして逐一報告を管理者にしている形態をとっていました。 それを SmartDrive Fleet を使うことで助手席の人はいらなくなり、リアルタイムでどこにいるのか管理ができるという使われ方をしています。
ユーザーヒアリングを行ったときに、いくつかのデイケアの事業所の方から 「利用者に休みが出たり、体験入所で新たに送迎する利用者が出たりするときにルートを計画するのがとても大変。土地勘のある人が非常に時間をかけて計画表を作る必要がある。」という話を受けました。
これを解決するためのツールはないかなと探していると Google OR-Tools というライブラリを発見したのでこれを試しに使ってみました。 OR-Tools は Google 製の最適化ツールです。線型計画法、貢献度分配問題、ナップサック問題、巡回セールスマン問題など様々な最適化問題を扱えます。 OR-ToolsはOSSで無料で使えて、言語は Python, C++, C#, Java に対応しています。今回はC++で試してみます。
今回やりたい送迎ルート作成問題は Vehicle Routing Problem (以下 VRP) であり、VRP は OR-Tools で解くことができます。 VRP は NP-hard (NP困難) に分類される問題で、計算完了までのかかる時間が指数関数的に増えるとされています。 OR-ToolsではVRPを数理的に解いていますが、他にディープラーニングの応用や量子コンピュータといったアプローチも取られているようで、ググると論文がヒットします。
VRP はどんなものか、OR-Tools の Guide に載ってる図を拝借して書きます。 (https://developers.google.com/optimization/routing/vrp)
真ん中の黒ノードが事業所、青ノードがピックアップする利用者宅とし、4台の車両を使います。ノード内の数字は ID です。
VRP を解くのに必要なのは、あるノードからあるノードへの距離情報です。17ノードあるので 17 * 17 のマトリックスで距離を表します。 ちなみに OR-Tools を実際にプロダクトに使う場合は、各利用者の地点座標からこのマトリックスを作る必要があります。 ありがたいことに Google Map には Distance Matrix API があり、住所を配列で送ることで各住所間の距離をマトリックスで返してくれます。ただし16個までしか配列を送れません。もし32個の地点の distance matrix を得たい場合には API を4回 call する必要があります。</description>
    </item>
    
  </channel>
</rss>
