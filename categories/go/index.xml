<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Go on nito95 blog</title>
    <link>https://nito95.github.io/categories/go/</link>
    <description>Recent content in Go on nito95 blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 24 Nov 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://nito95.github.io/categories/go/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>AWS CDK (TS) で prod/staging 環境を分けて Fargate 構築</title>
      <link>https://nito95.github.io/posts/2020-11-24/</link>
      <pubDate>Tue, 24 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://nito95.github.io/posts/2020-11-24/</guid>
      <description>AWS CDK (TS) を使って prod/staging でスタック名を分けてFargateの環境構築をしてみました。
デプロイするものは GET /health_check のみのエンドポイントを持つGo製のアプリです。
コードは こちら
AWS ECS Fargate とは ECSはコンテナ化されたアプリケーションを簡単にデプロイ、管理、スケーリングできるコンテナオーケストレーションサービスです。 Fargateはそのコンテナを実行する環境をサーバーレスにするサービスで、EC2インスタンスやそのスケーリングといった管理する必要がなくなります。
小さなアプリケーションをサクっと作ってデプロイするには Fargate は非常に便利です。
AWS CDK とは CDKはCloud Formation テンプレートを好きな言語で書くことができるDevelopmern Kitです。
Cloud Formation はAWSのシステム構成をJSONで記述したものです。コード化することで簡単に構築、修正、再利用できます。
アプリ実装 アプリ自体は本質ではないので何でもよかったのですが、個人的な趣味でGo製にし、フレームワークとして Echo を使ってます。
Fargateにデプロイするためにコンテナ化が必要なので、ローカル開発用の Dockerfile.local とデプロイ用の Dockerfile.prod の2つのDockerfileを用意します。 Dockerfile は [Qiita] Go 1.12 の開発環境と本番環境の Dockerfile を考える を参考にしています。
次にローカル開発用にdocker-compose.ymlを作り、servicesに Dockerfile.local を image に指定する app と postgres を記述します。
エンドポイントはヘルスチェックしかない単純なアプリですが、起動時に環境変数 ADDR と DATABASE_URL を取得し、取得できなければpanicで落ちるようにしています (コード)。 後に作る Task Definition で環境変数の設定が必要となります。 DATABASE_URL は環境によってデータベースが異なるのでここの値も変わります。</description>
    </item>
    
  </channel>
</rss>
