<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Vue.js on nito95 blog</title>
    <link>https://nito95.github.io/categories/vue.js/</link>
    <description>Recent content in Vue.js on nito95 blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sat, 21 Mar 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://nito95.github.io/categories/vue.js/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ブロックチェーンサービスでのMetaMaskログイン機能の実装方法 (Rails &#43; Vue.js)</title>
      <link>https://nito95.github.io/posts/2020-03-21/</link>
      <pubDate>Sat, 21 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://nito95.github.io/posts/2020-03-21/</guid>
      <description>最近NFTのマーケットプレイスサービスを友人のスタートアップで作っているのですが、お勉強がてら MetaMask ログイン機能を作ってみました。
パスワード不要で nonce 値を使った MetaMask 署名でのログインとなります。
完成イメージ MetaMask は ERC20準拠のトークンを保管するWebウォレットです。 ユーザー体験的にはGoogleやGithubなどのソーシャルログインと似ています。
  これはRails &amp;amp; Vue.jsで作っており、ソースコードはGithubにあげています → nito95/metamask-login-rails-vue
仕組み フロントがウォレットの秘密鍵を使って署名をすることでアカウントの所有権を証明します。バックエンドで署名済みデータ、ウォレットアドレス、nonce 使って検証できればそのウォレットアドレスはユーザー所有物だと認証でき、JWTを発行して以降の通信を行います。
詳細の実装を説明していきます。
まずはバックエンドで public_address と nonce を持った users テーブルを作成します。 public_address にはユーザーのウォレットアドレスを格納し、 nonce にはユーザー作成時&amp;amp;ログイン時に数字列をランダム生成した nonce 値を格納します。 public_address には UNIQUE制約をつけます。schema.rb はこんな感じ
ActiveRecord::Schema.define(version: 2021_07_09_032722) do create_table &amp;#34;users&amp;#34;, force: :cascade do |t| t.string &amp;#34;public_address&amp;#34;, null: false t.bigint &amp;#34;nonce&amp;#34;, null: false t.index [&amp;#34;public_address&amp;#34;], name: &amp;#34;index_users_on_public_address&amp;#34;, unique: true end end 認証フローの最初は、フロントで web3.eth.coinbase で MetaMask の現在アカウントのウォレットアドレスを取得します。 MetaMask とは web3.</description>
    </item>
    
  </channel>
</rss>
