<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>C on nito95 blog</title>
    <link>https://nito95.github.io/categories/c/</link>
    <description>Recent content in C on nito95 blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 10 Apr 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://nito95.github.io/categories/c/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>CでTCPソケットプログラミング</title>
      <link>https://nito95.github.io/posts/2020-04-10/</link>
      <pubDate>Fri, 10 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://nito95.github.io/posts/2020-04-10/</guid>
      <description>今関わっているプロジェクトで、3rd Party製のドラレコから流れるGPSと動画データを弊社のプラットフォームに投げ込むアダプターの開発をしています。
この3rd Partyデバイスとの通信方法が独自規格でして。。。通信方法について書かれたPDFがあり、こうやって通信を開始してね、このタイミングでACKしてね、危険運転があったらこういうバイナリを送るよ、とか詳細に書いてあるわけです。
ベテランのバックエンドエンジニアの人やファームウェアの人が通信部分をゴリゴリ作ってくださったのですが、コードを読んでも何がなんだかサッパリわかりませんでした。Ruby言語自体のコードの中身を見て、そこに書かれたCのコードを読んで、システムコールの仕様を調べては「よくわからんぞ」となっておりました。 そのときに「ソケットプログラミングしてみるといいよ」とアドバイスをもらったので、C言語でTCPソケットを実装してお勉強してみました。
ちなみにネットワークに関しての知識は
「マスタリング TCP/IP 入門編」 「Real World HTTP - 歴史とコードに学ぶインターネットとウェブ技術」 の書籍を読んだことがある程度です。
TCPプログラミング こちらのサイトを参考にさせていただきました Geekなぺーじ Linuxネットワークプログラミング
サーバー サーバーはクライアントからの接続要求を待ちますが、どのように待つか設定します。
ソケットを作る IPアドレスとポートを設定する クライアントから通信接続要求が来るまでプログラムを停止し接続後にプログラムを再開する データを送信する ソケットを閉じて通信接続を終了する クライアント クライアントは特定のIPアドレス、TCPポート番号で接続待ちをするサーバーに対して接続要求を出します。
ソケットを作る 接続先の指定 接続する サーバーからデータを受信 今回作ったもののソケットAPI callのサーバー、クライアントの関係を表すとこんな感じです。
ソースコードはこちら nito95/clang-socket-programming
サーバーもクライアントもローカルなのでクライアント側で設定した接続先のIPは127.0.0.1ですが、ここは本来 gethostbyname でWinSockに名前解決を任せます。
これはサーバーとクライアントが繋がるとサーバーからクライアントにメッセージが送られ接続が切れる、という片手落ちなものです。 サーバーとしてあるべきはマルチスレッドで複数のクライアントと接続し、クライアントからの要求を受けたらクライアントにメッセージを返し、接続を切り再び接続要求待ち状態にするのがよいですね。
初めてOSI参照モデルでいうL3まで下りて理解が深まりました。これ以降は全然作り込んではないですが、もしCで基本的なライブラリだけでサーバーとクライアントを作ってみる系の良い教材があれば試してみたいなと思います。</description>
    </item>
    
  </channel>
</rss>
